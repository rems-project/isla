// BSD 2-Clause License
//
// Copyright (c) 2020 Alasdair Armstrong
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use std::str::FromStr;
use crate::ir::*;
use crate::lexer::LexError;
use crate::ir_lexer::Tok;
use crate::bitvector::BV;
use crate::smt::{EnumId, EnumMember};
use crate::zencode;

grammar<'input, 'ir, B>(symtab: &Symtab<'ir>, type_info: &IRTypeInfo) where B: BV;

pub Val: Val<B> = {
    "()" => Val::Unit,
    "true" => Val::Bool(true),
    "false" => Val::Bool(false),
    <n:Nat> => Val::I128(i128::from_str(&n).unwrap()),
    "-" <n:Nat> => Val::I128(- i128::from_str(&n).unwrap()),
    <n:Nat> ":" "%i" <sz:Nat> => {
        let sz = u32::from_str(&sz).unwrap();
        if sz == 64 {
            Val::I64(i64::from_str(&n).unwrap())
        } else if sz == 128 {
            Val::I128(i128::from_str(&n).unwrap())
        } else {
            panic!("Cannot parse integer size {}", sz)
        }
    },
    "-" <n:Nat> ":" "%i" <sz:Nat> => {
        let sz = u32::from_str(&sz).unwrap();
        let nn = format!("-{}", &n);
        if sz == 64 {
            Val::I64(i64::from_str(&nn).unwrap())
        } else if sz == 128 {
            Val::I128(i128::from_str(&nn).unwrap())
        } else {
            panic!("Cannot parse integer size {}", sz)
        }
    },
    <hex:Hex> => {
        Val::Bits(B::from_str(&hex)
                      .unwrap_or_else(|| panic!("Unable to parse bitvector literal {}", hex)))
    },
    <bin:Bin> => {
        Val::Bits(B::from_str(&bin)
                      .unwrap_or_else(|| panic!("Unable to parse bitvector literal {}", bin)))
    },
    <cap:"cap"> => {
        Val::Bits(B::from_str(cap)
                      .unwrap_or_else(|| panic!("Unable to parse bitvector literal {}", cap)))
    },
    "[" <v:Val> ";" <n:"natural"> "]" => Val::Vector(vec![v; usize::from_str(n).unwrap()]),
    "{" <fields:Fields> "}" => fields,
    <id:Id> => {
        let member = symtab.get(&id).unwrap_or_else(|| panic!("Failed to find enumeration member {}", id));
        match type_info.enum_members.get(&symtab.get(&id).unwrap()) {
            Some((member, _, enum_id)) => {
                Val::Enum(EnumMember { enum_id: EnumId::from_name(*enum_id), member: *member })
            }
            None => panic!("Failed to find enumeration member"),
        }
    },
}

Field: (Name, Val<B>) = {
    <id:Id> "=" <v:Val> =>
        (symtab.get(&id).unwrap_or_else(|| panic!("No field {}", id)), v),
}

Fields: Val<B> = {
    <mut fields:(<Field> ",")*> <field:Field> => {
        fields.push(field);
        Val::Struct(fields.iter().cloned().collect())
    }
}

pub Ty: Ty<Name> = {
    "%bv" <n:Nat> => Ty::Bits(u32::from_str(&n).unwrap()),
    "%bool" => Ty::Bool,
    "%struct" <id:Id> => Ty::Struct(symtab.get(&id).unwrap()),
}

pub URVal: URVal<B> = {
    <v:Val> => URVal::Init(v),
    "undefined" ":" <ty:Ty> => URVal::Uninit(ty),
}

pub Loc: Loc<String> = {
    <id:Id> => Loc::Id(id),
    <l:Loc> "." <field:Id> => Loc::Field(Box::new(l), field),
}

pub Assign: (Loc<String>, Val<B>) = {
    <loc:Loc> "=" <v:Val> => (loc, v),
}

pub UAssign: (Loc<String>, URVal<B>) = {
    <loc:Loc> "=" <v:URVal> => (loc, v),
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

Id: String = <id:"identifier"> => zencode::encode(id);
Nat: String = <nat:"natural"> => nat.to_string();
String: String = <s:"string"> => s.to_string();
Hex: String = <b:"hex"> => b.to_string();
Bin: String = <b:"bin"> => b.to_string();

extern {
    type Location = usize;
    type Error = LexError;

    enum Tok<'input> {
        "identifier" => Tok::Id(<&'input str>),
        "natural" => Tok::Nat(<&'input str>),
        "string" => Tok::String(<&'input str>),
        "hex" => Tok::Hex(<&'input str>),
        "bin" => Tok::Bin(<&'input str>),
        "cap" => Tok::Cap(<&'input str>),
        "%i" => Tok::TyI,
        "()" => Tok::Unit,
        "," => Tok::Comma,
        "-" => Tok::Minus,
        "=" => Tok::Eq,
        "{" => Tok::Lbrace,
        "}" => Tok::Rbrace,
        "[" => Tok::Lsquare,
        "]" => Tok::Rsquare,
        "true" => Tok::True,
        "false" => Tok::False,
        "." => Tok::Dot,
        ":" => Tok::Colon,
        ";" => Tok::Semi,
        "undefined" => Tok::Undefined,
        "%bv" => Tok::TyBv,
        "%bool" => Tok::TyBool,
        "%struct" => Tok::TyStruct,
    }
}
