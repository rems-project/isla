# This is a config file for the Sail generated from ARM-ASL

pc = "_PC"

translation_function = "AArch64_TranslateAddress"

# TODO: BS: implement in isla-axiomatic properly...
# bit to set to inject an interrupt.
interrupt_status_bit = "ISR_EL1.I"

in_program_order = ["sail_barrier", "sail_cache_op", "sail_take_exception", "sail_return_exception", "sail_tlbi", "sail_system_register_write"]

# litmus variables have type uint32_t by default
default_sizeof = 4

# The assembler is used for assembling the code in litmus tests. We
# assume it takes arguments like GNU as.
[[toolchain]]
name = "macos-aarch64"
os = "macos"
arch = "aarch64"
assembler = "as -march=armv8.3-a --target=aarch64-unknown-linux-gnu -"
objdump = "/opt/homebrew/opt/llvm/bin/llvm-objdump"
nm = "/opt/homebrew/opt/llvm/bin/llvm-nm"
linker = "/opt/homebrew/bin/ld.lld"

[[toolchain]]
name = "default"
assembler = "aarch64-linux-gnu-as -march=armv8.3-a"
objdump = "aarch64-linux-gnu-objdump"
nm = "aarch64-linux-gnu-nm"
linker = "aarch64-linux-gnu-ld"

[mmu]
page_table_base = "0x300000"
page_size = "4096"
s2_page_table_base = "0x200000"
s2_page_size = "4096"

# This section contains the base address for loading the code for each
# thread in a litmus test, and the stride which is the distance
# between each thread in bytes. The overall range for thread memory is
# the half-open range [base,top)"
[threads]
base = "0x400000"
top = "0x500000"
stride = "0x1000"

# If we want to give symbolic addresses concrete values, then we start
# with a base address and increment by stride for each new symbolic
# address.
[symbolic_addrs]
base = "0x600000"
top = "0x700000"
stride = "0x10"

[registers]
ignore = [
  "_PC",
  "SEE",
  "InGuardedPage",
  "__trickbox_enabled",
  "v8Ap1_IMPLEMENTED",
  "v8Ap2_IMPLEMENTED",
  "v8Ap3_IMPLEMENTED",
  "v8Ap4_IMPLEMENTED",
  "v8Ap5_IMPLEMENTED",
  "v8Ap6_IMPLEMENTED",
  "v8Ap7_IMPLEMENTED",
  "v8Ap8_IMPLEMENTED",
  "v8Ap9_IMPLEMENTED",
  "v9Ap0_IMPLEMENTED",
  "v9Ap1_IMPLEMENTED",
  "v9Ap2_IMPLEMENTED",
  "v9Ap3_IMPLEMENTED",
  "v9Ap4_IMPLEMENTED",
]

# These registers are set before any symbolic execution occurs
[registers.defaults]
"__isla_vector_gpr" = false
#"__isla_continue_on_see" = true
"__monomorphize_reads" = false
"__monomorphize_writes" = false
"VBAR_EL1" = "0x0000000000000000"
"VBAR_EL2" = "0x0000000000000000"
# Causes CNTCV to be incremented every cycle if bit 0 is 1
"CNTCR" = "{ bits = 0x00000001 }"
# SSAdvance?
"MDSCR_EL1" = "{ bits = 0x0000000000000000 }"
"InGuardedPage" = false
"__highest_el_aarch32" = false
"__CNTControlBase" = "0x00000000000000"
"__supported_pa_size" = 52
"__supported_va_size" = 52
"__max_implemented_smeveclen" = 512
# HCR_EL2.RW
"HCR_EL2" = "{ bits = 0x0000000080000000 }"
"TCR_EL1" = "{ bits = 0x0000000000000000 }"
"TCR_EL2" = "{ bits = 0x0000000000000000 }"
"TCR_EL3" = "{ bits = 0x0000000000000000 }"
# SCR_EL3.{RW,NS}
"SCR_EL3" = "{ bits = 0x0000000000000401 }"
"SCTLR_EL3" = "{ bits = 0x0000000000000000 }"
"SMCR_EL3" = "{ bits = 0x0000000000000000 }"
"ZCR_EL3" = "{ bits = 0x0000000000000000 }"
"CPTR_EL3" = "{ bits = 0x0000000000000000 }"
"CNTP_CTL_EL0" = "{ bits = 0x0000000000000000 }"
"CNTV_CTL_EL0" = "{ bits = 0x0000000000000000 }"
"CNTHP_CTL_EL2" = "{ bits = 0x0000000000000000 }"
"CNTHV_CTL_EL2" = "{ bits = 0x0000000000000000 }"
"CNTHPS_CTL_EL2" = "{ bits = 0x0000000000000000 }"
"CNTHVS_CTL_EL2" = "{ bits = 0x0000000000000000 }"
"CNTPS_CTL_EL1" = "{ bits = 0x0000000000000000 }"
"CNTHCTL_EL2" = "{ bits = 0x0000000000000000 }"
"CNTKCTL_EL1" = "{ bits = 0x0000000000000000 }"
"MPAMIDR_EL1" = "{ bits = 0x0000000000000000 }"
"GPCCR_EL3" = "{ bits = 0x0000000000000000 }"

# disable tracing/advanced SIMD/FP
"CPACR_EL1" = "{ bits = 0x0000000000000000 }"

# Turn off anything debugging/performance monitoring sounding
"CTIDEVCTL" = "{ bits = 0x0000000000000000 }"
"MDCR_EL2" = "{ bits = 0x0000000000000000 }"
"PMCR_EL0" = "{ bits = 0x0000000000000000 }"
"_HDCR" = "{ bits = 0x0000000000000000 }"
"_PMCR" = "{ bits = 0x0000000000000000 }"

"CFG_RMR_AA64" = "0b1"
"CFG_RVBAR" = "0x0000000010300000"
"CFG_ID_AA64PFR0_EL1_EL3" = "0x1"
"CFG_ID_AA64PFR0_EL1_EL2" = "0x1"
"CFG_ID_AA64PFR0_EL1_EL1" = "0x1"
"CFG_ID_AA64PFR0_EL1_EL0" = "0x1"
# Need to investigate BTI extension. Guard pages cause problems with
# memory accesses.
"v8Ap1_IMPLEMENTED" = true
"v8Ap2_IMPLEMENTED" = false
"v8Ap3_IMPLEMENTED" = false
"v8Ap4_IMPLEMENTED" = false
"v8Ap5_IMPLEMENTED" = false
"v8Ap6_IMPLEMENTED" = false
"v8Ap7_IMPLEMENTED" = false
"v8Ap8_IMPLEMENTED" = false
"v8Ap9_IMPLEMENTED" = false
"v9Ap0_IMPLEMENTED" = false
"v9Ap1_IMPLEMENTED" = false
"v9Ap2_IMPLEMENTED" = false
"v9Ap3_IMPLEMENTED" = false
"v9Ap4_IMPLEMENTED" = false
"__unpred_tsize_aborts" = true
# Trickbox has various features for debugging spec and running tests
"__trickbox_enabled" = false
"__tlb_enabled" = false
"__syncAbortOnTTWNonCache" = true
"__syncAbortOnTTWCache" = true
"__syncAbortOnSoWrite" = true
"__syncAbortOnSoRead" = true
"__syncAbortOnReadNormNonCache" = true
"__syncAbortOnReadNormCache" = true
"__syncAbortOnPrefetch" = true
"__syncAbortOnDeviceRead" = true
"__mte_implemented" = "0b0000"
"FEAT_BRBEv1p1_IMPLEMENTED" = false
"FEAT_RME_IMPLEMENTED" = false
"FEAT_BRBE_IMPLEMENTED" = false
"__empam_force_ns_implemented" = false
"__empam_sdeflt_implemented" = false
"__empam_tidr_implemented" = false
"FEAT_CONSTPACFIELD_IMPLEMENTED" = false
"FEAT_PACQARMA3_IMPLEMENTED" = false
"FEAT_SME_IMPLEMENTED" = false
"__mpam_has_hcr" = true
"__mpam_has_altsp" = true
#"__vmid16_implemented" = true
"FEAT_PAN_IMPLEMENTED" = true
"FEAT_FP16_IMPLEMENTED" = true
"FEAT_DotProd_IMPLEMENTED" = true
"FEAT_CRC32_IMPLEMENTED" = true
"FEAT_AA32HPD_IMPLEMENTED" = true
"FEAT_AES_IMPLEMENTED" = true
"FEAT_PMULL_IMPLEMENTED" = true
"FEAT_SHA256_IMPLEMENTED" = true
"FEAT_SHA1_IMPLEMENTED" = true
"__syncAbortOnWriteNormNonCache" = false
"__syncAbortOnWriteNormCache" = false
"__syncAbortOnDeviceWrite" = false
"FEAT_MPAM_IMPLEMENTED" = false
"FEAT_SM4_IMPLEMENTED" = false
"FEAT_SM3_IMPLEMENTED" = false
"FEAT_SHA512_IMPLEMENTED" = false
"FEAT_SHA3_IMPLEMENTED" = false
"FEAT_LS64_V_IMPLEMENTED" = true
"FEAT_LS64_ACCDATA_IMPLEMENTED" = true
"FEAT_DoPD_IMPLEMENTED" = false

# External debug registers that don't appear to be fully initialised in the current model (or at all on AArch64)
"EDESR" = "{ bits = 0x00000000 }"
"EDECR" = "{ bits = 0x00000000 }"

# Avoid some extra complication
"FEAT_TME_IMPLEMENTED" = false
# As an alternative to the below, you could abstract the SPEBranch and
# BRBEBranch functions.
"FEAT_SPE_IMPLEMENTED" = false
"FEAT_SPEv1p1_IMPLEMENTED" = false
"FEAT_SPEv1p2_IMPLEMENTED" = false
"FEAT_SPEv1p3_IMPLEMENTED" = false
"FEAT_SPEv1p4_IMPLEMENTED" = false
"FEAT_PMUv3_IMPLEMENTED" = false

# LSE2 turns load/store-pair instructions on a 16-byte boundary
# into single-copy-atomic updates.
# this is unncessary branching in the footprint analysis
"FEAT_LSE2_IMPLEMENTED" = false

# BTI guards branches, maybe generating kinds of errors
#Â this causes unncessary branching during footprint analysis.
"FEAT_BTI_IMPLEMENTED" = false

# memory tagging
# this causes highly-symbolic addresses to go haywire
# with spurious aborts during footprint analysis
"FEAT_MTE_IMPLEMENTED" = false
"FEAT_MTE2_IMPLEMENTED" = false

"SPESampleInFlight" = false

"__g1_activity_monitor_implemented" = "0x0000"
"__g1_activity_monitor_offset_implemented" = "0x0000"

# These registers are set during symbolic execution by the special builtin "reset_registers"
[registers.reset]
# Bit 1 being unset allows unaligned accesses
# Bit 9 being set allows DAIF bits to be set at EL0
# Bit 26 being set allows cache-maintenance ops in EL0
"SCTLR_EL1" = "{ bits = 0x0000000004000200 }"
"CNTCR" = "{ bits = 0x00000000 }"
# Set above, but ENABLE might be reset to UNKNOWN
"CNTHP_CTL_EL2" = "{ bits = 0x0000000000000000 }"

# Monitor Debug Configuration Register (EL2)
# Turn HPME off to avoid even thinking about PMU events
# (it's set to UNKNOWN on reset)
"MDCR_EL2" = "{ bits = 0x00000000 }"

"PSTATE.nRW" = "0b0"

"SCR_EL3" = "{ bits = 0x0000000000000401 }"
"HCR_EL2" = "{ bits = 0x0000000080000000 }"

"VTCR_EL2" = "{ bits = 0x0000000000000000 }"

# A map from register names that may appear in litmus files to Sail
# register names
[registers.renames]
"X0" = "R0"
"X1" = "R1"
"X2" = "R2"
"X3" = "R3"
"X4" = "R4"
"X5" = "R5"
"X6" = "R6"
"X7" = "R7"
"X8" = "R8"
"X9" = "R9"
"X10" = "R10"
"X11" = "R11"
"X12" = "R12"
"X13" = "R13"
"X14" = "R14"
"X15" = "R15"
"X16" = "R16"
"X17" = "R17"
"X18" = "R18"
"X19" = "R19"
"X20" = "R20"
"X21" = "R21"
"X22" = "R22"
"X23" = "R23"
"X24" = "R24"
"X25" = "R25"
"X26" = "R26"
"X27" = "R27"
"X28" = "R28"
"X29" = "R29"
"X30" = "R30"
"W0" = "R0"
"W1" = "R1"
"W2" = "R2"
"W3" = "R3"
"W4" = "R4"
"W5" = "R5"
"W6" = "R6"
"W7" = "R7"
"W8" = "R8"
"W9" = "R9"
"W10" = "R10"
"W11" = "R11"
"W12" = "R12"
"W13" = "R13"
"W14" = "R14"
"W15" = "R15"
"W16" = "R16"
"W17" = "R17"
"W18" = "R18"
"W19" = "R19"
"W20" = "R20"
"W21" = "R21"
"W22" = "R22"
"W23" = "R23"
"W24" = "R24"
"W25" = "R25"
"W26" = "R26"
"W27" = "R27"
"W28" = "R28"
"W29" = "R29"
"W30" = "R30"
